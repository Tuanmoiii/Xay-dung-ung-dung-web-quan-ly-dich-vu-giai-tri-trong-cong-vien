-- ==========================================
--  H·ªÜ TH·ªêNG QU·∫¢N L√ù D·ªäCH V·ª§ GI·∫¢I TR√ç C√îNG VI√äN
--  Database: QLDV (MySQL)
--  Phi√™n b·∫£n: L∆∞·ª£c b·ªè email & phone trong b·∫£ng users
-- ==========================================

-- 1Ô∏è‚É£ T·∫°o database
CREATE DATABASE QLDV CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE QLDV;

-- 2Ô∏è‚É£ B·∫£ng roles (Ph√¢n quy·ªÅn)
CREATE TABLE roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE NOT NULL
);

-- 3Ô∏è‚É£ B·∫£ng users (Nh√¢n vi√™n / ng∆∞·ªùi d√πng h·ªá th·ªëng)
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    role_id INT,
    full_name VARCHAR(200) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
        ON UPDATE CASCADE ON DELETE SET NULL
);

-- 4Ô∏è‚É£ B·∫£ng parks (C√¥ng vi√™n)
CREATE TABLE parks (
    park_id INT AUTO_INCREMENT PRIMARY KEY,
    park_name VARCHAR(200) NOT NULL,
    address TEXT,
    description TEXT
);

-- 5Ô∏è‚É£ B·∫£ng services (D·ªãch v·ª• / Khu tr√≤ ch∆°i)
CREATE TABLE services (
    service_id INT AUTO_INCREMENT PRIMARY KEY,
    park_id INT,
    service_name VARCHAR(200) NOT NULL,
    code VARCHAR(50) UNIQUE,
    description TEXT,
    duration_minutes INT,
    capacity INT DEFAULT 0,
    price DECIMAL(12,2) NOT NULL,
    active BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (park_id) REFERENCES parks(park_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6Ô∏è‚É£ B·∫£ng schedules (L·ªãch ho·∫°t ƒë·ªông d·ªãch v·ª•)
CREATE TABLE schedules (
    schedule_id INT AUTO_INCREMENT PRIMARY KEY,
    service_id INT NOT NULL,
    date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    capacity INT DEFAULT 0,
    status ENUM('scheduled','closed','cancelled') DEFAULT 'scheduled',
    FOREIGN KEY (service_id) REFERENCES services(service_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7Ô∏è‚É£ B·∫£ng customers (Kh√°ch h√†ng)
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(200) NOT NULL,
    email VARCHAR(150),
    phone VARCHAR(20),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 8Ô∏è‚É£ B·∫£ng bookings (ƒê·∫∑t v√©)
CREATE TABLE bookings (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    booking_ref VARCHAR(50) UNIQUE NOT NULL,
    customer_id INT NOT NULL,
    schedule_id INT NOT NULL,
    num_people INT NOT NULL,
    total_amount DECIMAL(12,2) NOT NULL,
    status ENUM('pending','paid','cancelled','used') DEFAULT 'pending',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (schedule_id) REFERENCES schedules(schedule_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 9Ô∏è‚É£ B·∫£ng payments (Thanh to√°n)
CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    booking_id INT NOT NULL,
    amount DECIMAL(12,2) NOT NULL,
    method ENUM('cash','card','momo','vnpay') DEFAULT 'cash',
    provider_ref VARCHAR(100),
    status ENUM('pending','success','failed') DEFAULT 'pending',
    paid_at DATETIME,
    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- üîü B·∫£ng reviews (ƒê√°nh gi√° d·ªãch v·ª•)
CREATE TABLE reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    service_id INT,
    customer_id INT,
    rating TINYINT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (service_id) REFERENCES services(service_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
        ON UPDATE CASCADE ON DELETE SET NULL
);

-- 11Ô∏è‚É£ B·∫£ng assets (Thi·∫øt b·ªã / D·ª•ng c·ª•)
CREATE TABLE assets (
    asset_id INT AUTO_INCREMENT PRIMARY KEY,
    park_id INT,
    asset_name VARCHAR(200) NOT NULL,
    quantity INT DEFAULT 0,
    status ENUM('operational','maintenance','out_of_order') DEFAULT 'operational',
    FOREIGN KEY (park_id) REFERENCES parks(park_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 12Ô∏è‚É£ B·∫£ng maintenance_logs (Nh·∫≠t k√Ω b·∫£o tr√¨)
CREATE TABLE maintenance_logs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    asset_id INT,
    reported_by INT,
    description TEXT,
    status ENUM('reported','in_progress','completed') DEFAULT 'reported',
    reported_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (asset_id) REFERENCES assets(asset_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (reported_by) REFERENCES users(user_id)
        ON UPDATE CASCADE ON DELETE SET NULL
);

-- 13Ô∏è‚É£ Index h·ªó tr·ª£ truy v·∫•n nhanh
CREATE INDEX idx_service_date ON schedules(service_id, date);
CREATE INDEX idx_booking_ref ON bookings(booking_ref);
CREATE INDEX idx_payment_status ON payments(status);

-- 14Ô∏è‚É£ D·ªØ li·ªáu m·∫´u (tu·ª≥ ch·ªçn)
INSERT INTO roles (role_name)
VALUES ('Admin'), ('Staff'), ('Cashier'), ('Customer');

INSERT INTO users (role_id, full_name, password_hash)
VALUES (1, 'Nguy·ªÖn VƒÉn Qu·∫£n Tr·ªã', 'admin123'),
       (2, 'Tr·∫ßn Th·ªã Nh√¢n Vi√™n', 'staff123');

INSERT INTO parks (park_name, address, description)
VALUES ('C√¥ng vi√™n Gi·∫£i tr√≠ Trung t√¢m', '123 ƒê∆∞·ªùng Hoa Sen, H√† N·ªôi', 'C√¥ng vi√™n vui ch∆°i hi·ªán ƒë·∫°i v·ªõi nhi·ªÅu khu gi·∫£i tr√≠.');

INSERT INTO services (park_id, service_name, code, description, duration_minutes, capacity, price)
VALUES 
(1, 'T√†u l∆∞·ª£n si√™u t·ªëc', 'ROLLER01', 'Tr√≤ ch∆°i c·∫£m gi√°c m·∫°nh', 15, 20, 80000),
(1, 'Nh√† ma', 'HAUNTED01', 'Tr·∫£i nghi·ªám r√πng r·ª£n', 10, 10, 50000),
(1, 'V√≤ng quay m·∫∑t tr·ªùi', 'SUNWHEEL01', 'Ng·∫Øm to√†n c·∫£nh c√¥ng vi√™n', 20, 30, 70000);

INSERT INTO schedules (service_id, date, start_time, end_time, capacity)
VALUES 
(1, CURDATE(), '08:00', '08:30', 20),
(1, CURDATE(), '09:00', '09:30', 20),
(2, CURDATE(), '10:00', '10:20', 10),
(3, CURDATE(), '11:00', '11:30', 30);

-- ‚úÖ Ki·ªÉm tra
-- SHOW TABLES;
-- SELECT * FROM users;
